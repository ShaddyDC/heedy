/*
    This file represents the default configuration for a heedy server.

    You can override any of these options in your server's heedy.conf, or in 
    your plugin's configuration file.

*/


// By default, listen on all interfaces. 
host=""
// The port on which to run heedy
port = 1324
// The URL used for callbacks
url=""

// These are the builtin plugins that are active by default.
plugins = ["notifications","streams","registry","python","kv"]

// The list of users who are given administrative permissions. The user created when setting up heedy is
// automatically added to this list
admin_users = []

// Forbid the following usernames from being created
forbidden_users = ["admin","heedy","public","users"]


// The SQL app string to use to connect to the database. It is in the form:
//  <sql type>://<app string>
// By default, heedy uses an sqlite3 database saved in the data subfolder
sql = "sqlite3://heedy.db?_journal=WAL"


// These define the default language for heedy. Note that the fallback language must be a 
// fully supported language - to be sure, only use built-in languages as fallbacks.
language = "en"
fallback_language = "en"


// frontend gives the javascript module which implements the main UI
frontend = "heedy/main.mjs"

// The number of bytes to allow in a REST request body. This does not apply to datapoint inserts,
// which are allowed to be of arbitrary size 
// TODO: currently it DOES apply to datapoint inserts.
request_body_byte_limit = 2e+6

// Whether or not to permit the public to connect to the event system with websockets.
// Note that even if true, they will only have public-level access to events.
// This allows public not to take websocket resources from users
allow_public_websocket = false

// The timeout between asking a plugin nicely to shut down and killing it.
run_timeout = "10s"

// Runtypes that come compiled into heedy's core
runtype "builtin" {
    schema = {
        "key": {"type": "string"},
        "required": ["key"]
    }
}
runtype "exec" {
    schema = {
        "cmd": {"type": "array", "items": {"type": "string"}, "minItems": 1},
        "api": {"type": "string"},
        "required": ["cmd"]
    }
}

// -----------------------------------------------------------------------------
// NOTIFICATIONS
// 

plugin "notifications" {
    version = version
    description = "Notifications allow plugins and apps to notify a user of their status"
    frontend = "notifications/main.mjs"

    run "server" {
        type = "builtin"
        key = "notifications"
    }

    routes = {
        "/api/heedy/v1/notifications": "run://server"
    }
}

// -----------------------------------------------------------------------------
// STREAMS
// 

plugin "streams" {
    version = version
    description = "Streams are a builtin object that handles time-series data and visualization"
    frontend = "streams/main.mjs"

    run "server" {
        type = "builtin"
        key = "streams"
    }

}


// The stream object is built in - the implementation comes as part of the streams plugin
// Note that the builtin stream object cannot be disabled, even if the plugin itself is inactive.
// This is because a object is globally defined in the configuration.
type "stream" {

    // meta gives the schema required for stream metadata (in the "meta" field of the stream object)
    meta = {
        "schema": {
            "type": "object",
            "default": {}
        },
        "actor": {
            "type": "boolean",
            "default": false
        },
        "subtype": {
            "type": "string",
            "default": ""
        },
        "required": ["schema","actor"]
    }

    
    // The backend for streams is modified in the built-in version, since it is compiled into
    // the main executable, rather than being a separate process.
    routes = {
        "/data": "run://streams:server"
        "/data/*": "run://streams:server"
        "/actions": "run://streams:server"
        "/actions/*": "run://streams:server"
        "/act": "run://streams:server"
    }

    // These are the scope defined specifically for streams
    scope = {
        "act": "Allows intervention"
    }

}

// -----------------------------------------------------------------------------
// KV
// 

plugin "kv" {
    version = version
    description = "Key-value storage"

    run "server" {
        type = "builtin"
        key = "kv"
    }

    routes = {
        "/api/kv/*": "run://server"
    }
}

// -----------------------------------------------------------------------------
// PYTHON
// 

plugin "python" {
    version= version
    description = "Support for running python-based plugins"

    run "server" {
        type = "builtin"
        key = "python"
    }

    settings_schema = {
        "path": {
            "type": "string",
            "description": "Path to the python interpreter to use",
            "default": ""
        },
        "pip_args": {
            "type":"array",
            "items": {"type": "string"},
            "description": "Command-line arguments to pass to pip (pip install {args} mypackage or pip install {args} -r requirements.txt)",
            "default": []
        }
    }
}

runtype "python" {
    schema = {
        "path": {
            "type": "string"
        },
        "args": {
            "type": "array",
            "items": {"type": "string"},
            "default": []
        },
        "api": {"type": "string"},
        "required": ["path"]
    }
    api = "run://python:server/runtypes/python"
}

runtype "asyncio" {
    schema = {
        "path": {
            "type": "string"
        }
        "required": ["path"],
        "api": {"type": "string"}
    }
    api = "run://python:server/runtypes/asyncio"
}

// -----------------------------------------------------------------------------
// REGISTRY
// 


plugin "registry" {
    version = version
    description = "Add/remove plugins, update and install new ones."

    frontend = "registry/main.mjs"
}