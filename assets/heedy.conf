/*
    This file represents the default configuration for a heedy server.

    You can override any of these options in your server's heedy.conf, or in 
    your plugin's configuration file.

*/


// By default, listen on all interfaces. Changing this option requires a restart.
host=""
// The port on which to run heedy. Changing this option requires a restart
port = 1324
// The default heedy port is https-only. There is the option of using an http port by setting it here.
// Setting to 0 or -1 disables http
http_port = 8080

// The SQL connection string to use to connect to the database. It is in the form:
//  <sql type>://<connection string>
// By default, heedy uses an sqlite3 database within the db subfolder of the main config.
sql = "sqlite3://db/heedy.db?_journal=WAL"

// When CORS is set to true, cross-origin requests are permitted. This allows javascript from other websites to 
// access heedy, which is needed to allow viewing data from public streams on websites.
cors = true

// These define the default language for heedy. Note that the fallback language must be a 
// fully supported language - to be sure, only use built-in languages as fallbacks.
language = "en"
fallback_language = "en"


// frontend contains the settings for the main web UI
frontend {
    // The routes that the app has for a logged in user. They all point to javascript
    // module files containing vue components that are loaded when the route is visited
    routes = {
        "/" = "heedy/user.mjs"
        "/settings" = "heedy/settings.mjs"
        "/logout" = "heedy/logout.mjs"
        "/user/:username/" = "heedy/user.mjs"
    }

    // The main menu to show a logged in user. The keys are just ids, to allow modification
    // from plugins/the main config
    menu = {
        "home": {
            route = "/"
            icon = "mi:home"
            text = "Home"
            description = "Go to the homepage"
            active = true
        }
    }

    // The routes that the app has for a visitor (ie: not logged in)
    public_routes = {
        "/" = "heedy/public_home.mjs"
        "/login" = "heedy/login.mjs"
    }
    public_menu = {
        
        "home": {
            route = "/"
            icon = "mi:home"
            text = "Home"
            description = "Homepage"
            active = true
        }
    }

    
}

// The number of bytes to allow in a REST request body. This does not apply to datapoint inserts,
// which are allowed to be of arbitrary size
request_body_byte_limit = 2e+6

// Forbid the following usernames to exist in the database
// forbidden_users = ["test"]

// Available scopes. Note that scopes cannot be removed, since adding them assumes that
// the given plugin requires them to exist for permissions to a given resource.
user_scopes = {
    "user:edit:name": "Allows a user to change their username",
    "user:delete": "Allows a user to delete their own user",
    "connection:edit": "Allows a user to edit their connections' metadata",
    "users:create": "Allows the user to add new users to the database",
    "users:read": "Gives permission to read all users in the database",
    "users:edit": "Allows modifying full name, avatar, and description of all readable users",
    "users:edit:password": "Allows changing passwords of all readable users",
    "users:edit:name": "Allows changing username of all readable users",
    "users:delete": "Permits deletion of all readable users",
    "users:scopes": "Allows a user to read the scopes of all readable users",
    "streams:create": "Create streams for any readable user",
    "streams:read": "Read the metadata of all streams",
    "streams:edit": "Edit the metadata of all readable streams",
    "streams:delete": "Delete all readable streams",
    "streams:data:add": "Add datapoints to any readable stream",
    "streams:data:remove": "Remove data from any readable stream",
    "streams:data:act": "Insert actions into any readable actor stream",
    "connections:read": "Read all connections for all readable users",
    "connections:edit": "Edit the metadata for all readable connections",
    "connections:edit:apikey": "Reset the API Key of any readable connection",
    "connections:create": "Create connections for any readable user",
    "connections:delete": "Delete any readable connection",
    "groups:read": "Read all groups of all readable users",
    "groups:edit": "Edit the metadata of all readable groups",
    "groups:edit:members": "Edit the members of all readable groups",
    "groups:edit:streams": "Edit the streams belonging to any readable group",
    "groups:create": "Create groups belonging to any readable user"
}

connection_scopes = {
    "self:edit": "Edit its own metadata, including avatar, description, and full name",
    "self:streams": "Create its own streams, over which it has full control",
    "user:read": "Read your user info",
    "user:edit": "Edit your basic user info (full name, avatar, description)",
    "stream:create": "Create streams belonging to you",
    "stream:read": "Read any of your streams' metadata",
    "stream:edit": "Edit any of your streams' metadata",
    "stream:delete": "Delete any of your streams",
    
}


// These are scopes that are given to all connections by default when created from the UI
new_connection_scopes = ["self:edit","self:streams"]
