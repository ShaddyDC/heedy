/*
    This file represents the default configuration for a heedy server.

    You can override any of these options in your server's heedy.conf,
    or in your plugin's configuration file.

*/

// By default, listen on all interfaces. 
host=""
// The port on which to run heedy
port = 1324
// The URL used for callbacks
url=""

// The list of users who are given administrative permissions. 
// The user created when setting up heedy is automatically added here
admin_users = []

// These are the builtin plugins that are active by default.
plugins = ["notifications","timeseries","registry","python","kv"]

// Forbid the following usernames from being created
forbidden_users = ["admin","heedy","public","users"]

// The SQL app string to use to connect to the database, in the form:
//  <sql type>://<app string>
// By default, heedy uses an sqlite3 database saved in the data subfolder
sql = "sqlite3://heedy.db?_journal=WAL"

// frontend gives the javascript module which implements the main UI
frontend = "heedy/main.mjs"

// The number of bytes to allow in a REST request body. 
// NOTE: This does not apply to datapoint inserts in timeseries, 
// which are allowed to be of arbitrary size 
// TODO: currently it DOES apply to datapoint inserts.
request_body_byte_limit = 4e+6

// Whether or not to permit the public to connect to websockets.
// Note that even if true, they will only have public-level access to events.
// This allows public not to take websocket resources from users
allow_public_websocket = false

// The timeout between asking a plugin nicely to shut down and killing it.
run_timeout = "10s"

// Runtypes that come compiled into heedy's core. The builtin runtype refers to
// built-in code that is run on the given key. The exec runtype allows plugins
// to run arbitrary executables as follows:
//      plugin "myplugin" {
//          run "myexecutable" {
//              type="exec"
//              cmd=["./myexecutable","--arg1"]
//          }
//      }
runtype "builtin" {
    schema = {
        "key": {"type": "string"},
        "required": ["key"]
    }
}
runtype "exec" {
    schema = {
        "cmd": {"type": "array", "items": {"type": "string"}, "minItems": 1},
        "api": {"type": "string"},
        "required": ["cmd"]
    }
}

// -----------------------------------------------------------------------------
// NOTIFICATIONS
// 

plugin "notifications" {
    version= version
    description= "Allow plugins and apps to notify a user of their status"
    frontend= "notifications/main.mjs"

    run "server" {
        type = "builtin"
        key = "notifications"
    }

    routes = {
        "/api/notifications": "run://server"
    }
}

// -----------------------------------------------------------------------------
// TIMESERIES
// 

plugin "timeseries" {
    version= version
    description= join("Timeseries are a builtin object that handles",
                        " time-series data and visualization")
    frontend= "timeseries/main.mjs"

    run "server" {
        type = "builtin"
        key = "timeseries"
    }

}

// The timeseries object is built in - its implementation comes as part of the 
// timeseries plugin. Note that the builtin timeseries object cannot be disabled, 
// even if the plugin itself is inactive. This is because an object type 
// is globally defined in the configuration.
type "timeseries" {

    // meta gives the schema required for timeseries metadata 
    // (in the "meta" field of the timeseries object)
    meta = {
        "schema": {
            "type": "object",
            "default": {}
        },
        "actor": {
            "type": "boolean",
            "default": false
        },
        "subtype": {
            "type": "string"
        },
        "required": ["schema","actor"]
    }

    routes = {
        "/timeseries": "run://timeseries:server"
        "/timeseries/*": "run://timeseries:server"
        "/actions": "run://timeseries:server"
        "/actions/*": "run://timeseries:server"
        "/act": "run://timeseries:server"
    }

    // These are the scope defined specifically for timeseries
    scope = {
        "act": "Allows intervention"
    }

}

// -----------------------------------------------------------------------------
// KV
// 

plugin "kv" {
    version = version
    description = "Key-value storage for apps and plugins"

    run "server" {
        type = "builtin"
        key = "kv"
    }

    routes = {
        "/api/kv/*": "run://server"
    }
}

// -----------------------------------------------------------------------------
// PYTHON
// 

plugin "python" {
    version= version
    description= "Support for running python-based plugins"

    run "server" {
        type = "builtin"
        key = "python"
    }

    settings_schema = {
        "path": {
            "type": "string",
            "description": "Path to the python interpreter to use",
            "default": ""
        },
        "pip_args": {
            "type":"array",
            "items": {"type": "string"},
            "description": join(
                    "Command-line arguments to pass to pip (pip install {args}",
                    " mypackage or pip install {args} -r requirements.txt)"),
            "default": []
        }
    }
}

// The python runtype allows running a python file using the Python interpreter
// configured in heedy. Furthermore, it also makes sure any dependecies
// in a requirements.txt are installed before running the file.
runtype "python" {
    schema = {
        "path": {
            "type": "string"
        },
        "args": {
            "type": "array",
            "items": {"type": "string"},
            "default": []
        },
        "api": {"type": "string"},
        "required": ["path"]
    }
    api = "run://python:server/runtypes/python"
}

// -----------------------------------------------------------------------------
// REGISTRY
// 

plugin "registry" {
    version = version
    description = "Add/remove plugins, update and install new ones."

    frontend = "registry/main.mjs"
}