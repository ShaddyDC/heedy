/*
    This file represents the default configuration for a heedy server.

    You can override any of these options in your server's heedy.conf, or in 
    your plugin's configuration file.

*/


// By default, listen on all interfaces. Changing this option requires a restart.
host=""
// The port on which to run heedy. Changing this option requires a restart
port = 1324
// The default heedy port is https-only. There is the option of using an http port by setting it here.
// Setting to 0 or -1 disables http
http_port = 8080

// The SQL connection string to use to connect to the database. It is in the form:
//  <sql type>://<connection string>
// By default, heedy uses an sqlite3 database within the db subfolder of the main config.
sql = "sqlite3://db/heedy.db?_journal=WAL"

// When CORS is set to true, cross-origin requests are permitted. This allows javascript from other websites to 
// access heedy, which is needed to allow viewing data from public streams on websites.
cors = true

// These define the default language for heedy. Note that the fallback language must be a 
// fully supported language - to be sure, only use built-in languages as fallbacks.
language = "en"
fallback_language = "en"


// frontend contains the settings for the main web UI
frontend {
    // The routes that the app has for a logged in user. They all point to javascript
    // module files containing vue components that are loaded when the route is visited
    routes = {
        "/" = "heedy/user.mjs"
        "/settings" = "heedy/settings.mjs"
        "/logout" = "heedy/logout.mjs"
        "/user/:user/" = "heedy/user.mjs"
    }

    // The main menu to show a logged in user. The keys are just ids, to allow modification
    // from plugins/the main config
    menu = {
        "home": {
            route = "/"
            icon = "mi:home"
            text = "Home"
            description = "Go to the homepage"
            active = true
        }
    }

    // The routes that the app has for a visitor (ie: not logged in)
    public_routes = {
        "/" = "heedy/public_home.mjs"
        "/login" = "heedy/login.mjs"
    }
    public_menu = {
        
        "home": {
            route = "/"
            icon = "mi:home"
            text = "Home"
            description = "Homepage"
            active = true
        }
    }

    
}

// The number of bytes to allow in a REST request body. This does not apply to datapoint inserts,
// which are allowed to be of arbitrary size
request_body_byte_limit = 2e+6

// This disallows certain group names to exist. You can forbid a username by simply disallowing its group,
// or a device name by giving /devicename - internal group names are auto-generated UUIDs.. this requires more thought
// NOTE: I dont think that groups will work like this - it iwll have to be explicit username restriction
//forbidden_groups = ["test"]

// Available scopes. Note that scopes cannot be removed, since adding them assumes that
// the given plugin requires them to exist for permissions to a given resource.
scopes = {
    "user:read": "Read your user info (name, icon, description, etc)",
    "user:edit": "Modify your user info",
    "user:edit:name": "Change your username",
    "user:edit:password": "Change your password",
    "user:delete": "Delete your user",
    "users:create": "Add users",
    "users:read": "Read all users you can read",
    "users:edit": "Modify accessible users",
    "users:edit:password": "Change passwords of accessible users",
    "users:delete": "Delete accessible users",
    "user:scopes": "Read your user's scopes",
    "users:scopes": "Read scopes of users you can read",
    "group:scopes": "Read your groups' scopes",
    "connection:scopes": "Read its own user-permitted scopes",
    "connection:active_scopes": "Read the scopes that it actually has",
    "admin": "DATABASE ADMINSTRATOR - access to database settings"
}

// These are the scopes that a user is permitted to transfer to groups it owns
transferable_scopes = []

// These are scopes that are added to each user/group/connection when they are created.
// They can be manually removed in the frontend after they are created. 
// Note that scopes that *all* users have are given in the users group, so these scopes
// are added to each user individually on creation
new_user_scopes = [
    "user:edit", "user:edit:password", "user:delete",
    "group:read",
    "connection:read",
    "connection:create",
    "user:scopes"
    ]
new_group_scopes = []
new_connection_scopes = ["user:read","connection:read","connection:edit"]
