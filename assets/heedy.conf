/*
    This file represents the default configuration for a heedy server.

    You can override any of these options in your server's heedy.conf, or in 
    your plugin's configuration file.

*/


// By default, listen on all interfaces. Changing this option requires a restart.
host=""
// The port on which to run heedy. Changing this option requires a restart
port = 1324

// These are the builtin plugins that are active by default
plugins = ["streams"]

// The list of users who are given administrative permissions. The user created when setting up heedy is
// automatically added to this list
admin_users = []

// Forbid the following usernames from being created
forbidden_users = ["admin","heedy","public","users"]


// The SQL connection string to use to connect to the database. It is in the form:
//  <sql type>://<connection string>
// By default, heedy uses an sqlite3 database saved in the data subfolder
sql = "sqlite3://heedy.db?_journal=WAL"

// The timeout between sending an interrupt to a plugin's exec process and killing it.
exec_timeout = "10s"

// These define the default language for heedy. Note that the fallback language must be a 
// fully supported language - to be sure, only use built-in languages as fallbacks.
language = "en"
fallback_language = "en"


// frontend gives the javascript module which implements the main app
frontend = "heedy/main.mjs"

// The number of bytes to allow in a REST request body. This does not apply to datapoint inserts,
// which are allowed to be of arbitrary size 
// TODO: currently it DOES apply to datapoint inserts.
request_body_byte_limit = 2e+6

// -----------------------------------------------------------------------------
// STREAMS
// 
// Streams are implemented as a plugin, which is included by default. 
// The following is a copy of the stream plugin configuration, modified
// to reflect its builtin status.

plugin "streams" {
    version = "0.1.0"
    description = "Streams are a builtin source that handles time-series data and visualization"
    frontend = "streams/main.mjs"
}


// The stream source is built in - the implementation comes as part of the streams plugin
// Note that the builtin stream source cannot be disabled, even if the plugin itself is inactive.
// This is because a source is globally defined in the configuration.
source "stream" {

    // meta gives the schema required for stream metadata (in the "meta" field of the stream source)
    meta = {
        "schema": {
            "type": "object",
            "default": {}
        },
        "actor": {
            "type": "boolean",
            "default": false
        },
        "subtype": {
            "type": "string",
            "default": ""
        },
        "required": ["schema","actor"]
    }

    // The backend for streams is modified in the built-in version, since it is compiled into
    // the main executable, rather than being a separate process.
    backend = {
        "/data": "builtin://streams"
        "/actions": "builtin://streams"
        "/act": "builtin://streams"
    }

    // These are the scopes defined specifically for streams
    scopes = {
        "act": "Allows intervention"
    }

}
