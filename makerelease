#!/bin/sh
# If you just want to compile ConnectorDB, you do not need this file. Instead, run:
#
#   make deps
#   make
#
# This file generates release builds for all operating systems supported in ConnectorDB.
# Before this file can be run, you will need to have gpg set up to generate signatures
# for the builds, as well as the cross-compilers for all the systems supported by ConnectorDB.
# 
# Due to a dependency on sqlite, cross-compilers are required to generate builds.
# It is assumed that you are on linux. To get a functional cross-compilation system,
# you will need to have:
#
# Ubuntu:
#   apt-get install gcc-arm-linux-gnueabihf gcc-mingw-w64
#
# Arch:
#   pacman -S mingw-w64-gcc
#   yaourt -S arm-linux-gnueabihf-gcc
#
# You might need to change the command names to reflect the cross-compiler binary names:
LINUX_CC=gcc
WINDOWS_CC=x86_64-w64-mingw32-gcc
ARM_CC=arm-linux-gnueabihf-gcc
MAC_CC=

GITVERSION=`git rev-parse HEAD | cut -c 1-7`
GITCOUNT=`git rev-list --count HEAD`
VERSION=${1:-c${GITCOUNT}_git$GITVERSION}

echo -e "\033[1mBuilding ConnectorDB ${VERSION}\033[0m"

# Clear out the releaes directory
rm -rf ./release
mkdir ./release

echo -e "\033[1m-----> Updating Dependencies...\033[0m"
# The first thing that is done is a make clean, and an update of all dependencies
#make clean
#make deps

echo -e "\033[1m-----> Building Frontend...\033[0m"
# Next, we set up resources (such as frontend). This is done only once for all OS.
#make resources

# Next, we start building for all supported architectures.
# This builds only the server versions. The desktop versions
# are built from connectordb-laptoplogger, using the results of this build process.

function build {
    echo -e "\033[1m-----> Building $1 $2...\033[0m"
    # Clear the binaries from previous builds
    rm bin/connectordb 2> /dev/null
    rm bin/dep/gnatsd 2> /dev/null
    make bin/connectordb GO="GOOS=$1 GOARCH=$2 CC=$3 CGO_ENABLED=1 go"
    make bin/dep/gnatsd GO="GOOS=$1 GOARCH=$2 go"
    # Now generate the package
    NAME=connectordb_server_${VERSION}_$1_$2
    mkdir ./release/${NAME}
    cp -r ./bin/* ./release/${NAME}
    # Finally, generate the tar.gz of the package
    cd ./release
    tar -czf ${NAME}.tar.gz ${NAME}
    cd ..
    # ... and generate the signature
    gpg --armor --detach-sig -o ./release/${NAME}.tar.gz.asc ./release/${NAME}.tar.gz
}

build linux amd64 $LINUX_CC
build windows amd64 $WINDOWS_CC
build linux arm $ARM_CC

echo -e "\033[1m-----> Windows-Specific Build Patches...\033[0m"

#SPECIAL WINDOWS-SPECIFIC BUILD MODIFICATIONS

# Modify the executable names for windows to include .exe 
WNAME=connectordb_server_${VERSION}_windows_amd64
mv ./release/${WNAME}/connectordb ./release/${WNAME}/connectordb.exe
mv ./release/${WNAME}/dep/gnatsd ./release/${WNAME}/gnatsd.exe

# Download redis binaries, and put them in dep folder of windows build since windows is... windows
wget --quiet -O release/redis.zip https://github.com/MSOpenTech/redis/releases/download/win-3.2.100/Redis-x64-3.2.100.zip
unzip -qq release/redis.zip -d release/redis
cp release/redis/redis-cli.exe release/${WNAME}/dep
cp release/redis/redis-server.exe release/${WNAME}/dep
rm -rf ./release/redis
rm release/redis.zip

# Finally, remove the old tar.gz, signature, and generate a new zip file for windows
rm release/${WNAME}.tar.gz release/${WNAME}.tar.gz.asc
cd ./release
zip -qq -r ${WNAME}.zip ${WNAME}
cd ..
gpg --armor --detach-sig -o ./release/${WNAME}.zip.asc ./release/${WNAME}.zip
