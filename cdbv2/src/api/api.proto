syntax = "proto3";

package connectordb;
option go_package = "pb";

import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
	info: {
		title: "ConnectorDB API";
		version: "1.0";
		contact: {
			name: "ConnectorDB Contributors";
			url: "https://github.com/connectordb/connectordb";
			email: "none@example.com";
		};
		license: {
			name: "Apache2";
			url: "https://www.apache.org/licenses/LICENSE-2.0";
		};
	};
	// Overwriting host entry breaks tests, so this is not done here.
	external_docs: {
		url: "https://connectordb.io/docs";
		description: "ConnectorDB Docs";
	}
	schemes: HTTP;
	schemes: HTTPS;
	schemes: WSS;
	consumes: "application/json";
	produces: "application/json";
	
};

message PingMessage { string greeting = 1; }

service Ping {
  rpc SayHello(PingMessage) returns (PingMessage) {
    option (google.api.http) = {
      post : "/api/v1/cdb/echo"
      body : "*"
    };
  }
}
/*
message UserQuery {
	string name = 1;
}


message GroupByName {
	UserQuery user = 1; 
	string name = 2;
}

message GroupQuery {
	// Groups are queried with respect to a user or UUID
	oneof querytype {
		GroupByName group = 1;
		string uuid = 2;
	}
	
}

message StreamQuery {
	oneof querytype {
		StreamByName stream = 1;
		string uuid = 2;
	}
}
*/
/*
message StreamDataQuery {
	uint64 i1 = 1;
	uint64 i2 = 2;
	double t1 = 3;
	double t2 = 4;
	uint64 limit = 5;
	string transform = 6;
}
*/

/*

message User {
	string name = 1;
	string nickname = 2;
	string profilepic = 3; // This is a url http,base64 and icon are all permitted
} // By default, no need for listing all the user's groups.

// A datapoint contains a timestamp, and msgpack-encoded data
message Datapoint {
	double t = 1;
	bytes d = 2;
}

message SearchQuery {
	string search = 1;
	uint64 limit = 2;
}

service ConnectorDB {
	rpc ListUsers(SearchString) returns (stream User) {};
	//rpc QueryStream(StreamDataQuery) returns (stream Datapoint) {};
}
*/